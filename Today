AlertDialog(backpress)
@Override
    public void onBackPressed() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setMessage("Do you want to Exit?");
        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                //if user pressed "yes", then he is allowed to exit from application
                finish();
            }
        });
        builder.setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                //if user select "No", just cancel this dialog and continue with app
                dialog.cancel();
            }
        });
        AlertDialog alert = builder.create();
        alert.show();
    }

Notification
 btn2.setOnClickListener{
            val builder=NotificationCompat.Builder(this)
            val intent=Intent(Intent.ACTION_VIEW, Uri.parse("https://www.google.com"))
            val pendingIntent=PendingIntent.getActivity(this,0,intent,0)
            builder.setSmallIcon(android.R.drawable.ic_dialog_alert)
            builder.setContentIntent(pendingIntent)
            builder.setContentTitle("Notification")
            builder.setContentText("Your notification here")

            val notificationmaManager=getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationmaManager.notify(1,builder.build())
        }


Audio
	private lateinit var mp:MediaPlayer(declare global)
	mp=MediaPlayer.create(this,R.raw.sample)
        var pos=0

        val button1 = findViewById (R.id.button1) as Button
        val button2 = findViewById (R.id.button2) as Button
        val button3 = findViewById (R.id.button3) as Button
        val button4 = findViewById (R.id.button4) as Button
        val button5 = findViewById (R.id.button5) as Button

        button1.setOnClickListener{
            mp.start()

        }
        button2.setOnClickListener{
            if(mp.isPlaying())
            {
                pos=mp.getCurrentPosition()
                mp.pause()
            }
        }
        button3.setOnClickListener{
            if(mp.isPlaying()==false)
            {
                mp.seekTo(pos)
                mp.start()

            }
        }
        button4.setOnClickListener {
            mp.pause()
            pos = 0
            mp.seekTo(0)
        }
        }

    override fun onDestroy() {

        super.onDestroy()
        mp.release()
    }

Broadcast Receiver(Airplane & Power)
	lateinit var receiver : BroadcastReceiver(declare global)
	val filter = IntentFilter()
        	filter.addAction(Intent.ACTION_POWER_CONNECTED)
       		//filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED)
        	filter.addAction(Intent.ACTION_POWER_DISCONNECTED)
        	receiver = object:BroadcastReceiver(){
            	override fun onReceive(context: Context?, intent: Intent?)
            		{ Toast.makeText(context,intent?.action,Toast.LENGTH_SHORT).show() } }
        			registerReceiver(receiver, filter)
		onDestroy()
		{
		unregisterReceiver(receiver)
	}

Thread
button.setOnClickListener {
            Thread(Runnable {
                killSomeTime()
            }).start()}

private fun killSomeTime(){
        for(i in 1..20){
            runOnUiThread(Runnable {
                textView.text = i.toString()
            })
            Thread.sleep(2000)
        }
    }

Permission
- MainActivity.kt

class MainActivity : AppCompatActivity() {

    private val PERMISSION_CODE = 1000
    private val IMAGE_CAPTURE_CODE = 1001
    private val IMAGE_PICK_CODE = 1002;
    var image_uri: Uri? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        btnCapture.setOnClickListener {
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if(checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_DENIED ||
                        checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED) {
                    val permission = arrayOf(Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    requestPermissions(permission, PERMISSION_CODE)
                }
                else {
                    openCamera()
                }
            }
            else {
                openCamera()
            }
        }

        btnPick.setOnClickListener {
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if(checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED) {
                    val permission = arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE)
                    requestPermissions(permission, PERMISSION_CODE)
                }
                else {
                    pickFromGallery()
                }
            }
            else {
                pickFromGallery()
            }
        }
		
		//var surfaceHolder = surfaceView.holder // For video
        var pauseFlag: Boolean = false
        lateinit var player: MediaPlayer

        btnPlay.setOnClickListener {
            if(pauseFlag){
                player.start()
                pauseFlag = false
            }
            else{
                player = MediaPlayer.create(this, R.raw.sam)
				//player.setDisplay(surfaceHolder) // For video
				//Also add surfaceView in xml
                player.start()
            }
            Toast.makeText(this, "Audio Playing", Toast.LENGTH_LONG).show()
        }

        btnPause.setOnClickListener {
            pauseFlag = true
            player.pause()
            Toast.makeText(this, "Audio Paused", Toast.LENGTH_LONG).show()
        }

        btnStop.setOnClickListener {
            player.stop()
            player.release()
            Toast.makeText(this, "Audio Stopped", Toast.LENGTH_LONG).show()
        }
    }

    private fun openCamera() {
        val values = ContentValues()
        values.put(MediaStore.Images.Media.TITLE, "New Pic")
        values.put(MediaStore.Images.Media.DESCRIPTION, "From the camera")
        image_uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)
        val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, image_uri)
        startActivityForResult(cameraIntent, IMAGE_CAPTURE_CODE)
    }

    private fun pickFromGallery(){
        val intent = Intent(Intent.ACTION_PICK)
        intent.type = "image/*"
        startActivityForResult(intent, IMAGE_PICK_CODE)
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        when(requestCode){
            PERMISSION_CODE -> {
                if(grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED && requestCode == IMAGE_CAPTURE_CODE){
                    openCamera()
                }
                else if(grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED && requestCode == IMAGE_PICK_CODE){
                    pickFromGallery()
                }
                else{
                    Toast.makeText(this, "Permission Denied", Toast.LENGTH_LONG).show()
                }
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        if(resultCode == Activity.RESULT_OK && requestCode == IMAGE_CAPTURE_CODE){
            cameraImageView.setImageURI(image_uri)
        }

        if(resultCode == Activity.RESULT_OK && requestCode == IMAGE_PICK_CODE){
            galleryImageView.setImageURI(data?.data)
        }
    }

}

- AndroidManifest.xml
<uses-permission android:name="android.permission.CAMERA"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>


Telephone
-- Telephone API -- 
- MainActivity.kt
class MainActivity : AppCompatActivity() {

    private val PERMISSION_CODE = 1000
    var details: String = ""
    var strPhoneType : String = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val number = 9167100326
        btnDial.setOnClickListener {
            val intent = Intent(Intent.ACTION_DIAL)
            intent.data = Uri.parse("tel:+91 $number")
            startActivity(intent)
        }

        btnPhone.setOnClickListener {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if (checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_DENIED) {
                    val permission = arrayOf(Manifest.permission.READ_PHONE_STATE)
                    requestPermissions(permission, PERMISSION_CODE)
                } else {
                    phoneData()
                }
            } else {
                phoneData()
            }
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        when(requestCode){
            PERMISSION_CODE -> {
                if(grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED){
                    phoneData()
                }
                else{
                    Toast.makeText(this, "Permission Denied", Toast.LENGTH_LONG).show()
                }
            }
        }
    }

    private fun phoneData() {
        var manager = getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager
        var phoneType = manager.phoneType
        when(phoneType) {
            TelephonyManager.PHONE_TYPE_CDMA -> {
                strPhoneType = "CDMA"
            }
            TelephonyManager.PHONE_TYPE_GSM -> {
                strPhoneType = "GSM"
            }
            TelephonyManager.PHONE_TYPE_NONE -> {
                strPhoneType = "NONE"
            }
            TelephonyManager.PHONE_TYPE_SIP -> {
                strPhoneType = "SIP"
            }
        }
        try {
            textView.text = "Phone Details:\n" +
                    "Phone network type = $strPhoneType \n" +
                    "IMEI Number = ${manager.getImei()} \n" +
                    "SubscriberID = ${manager.subscriberId} \n" +
                    "Sim serial number = ${manager.simSerialNumber} \n" +
                    "Software version = ${manager.deviceSoftwareVersion} \n" +
                    "In roaming? = ${manager.isNetworkRoaming}"
        } catch (se: SecurityException) {
            println(se.message)
        }
    }
}

- AndroidManifest.xml
<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
